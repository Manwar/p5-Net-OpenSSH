diff --git a/sshfs.c b/sshfs.c
index 81ee64a..e2d40e8 100644
--- a/sshfs.c
+++ b/sshfs.c
@@ -183,6 +183,7 @@ struct sshfs {
 	int follow_symlinks;
 	int no_check_root;
 	int detect_uid;
+	int slave;
 	unsigned max_read;
 	unsigned max_write;
 	unsigned ssh_ver;
@@ -199,7 +200,8 @@ struct sshfs {
 	pthread_mutex_t lock_write;
 	int processing_thread_started;
 	unsigned int randseed;
-	int fd;
+	int infd;
+	int outfd;
 	int ptyfd;
 	int ptyslavefd;
 	int connver;
@@ -312,6 +314,7 @@ static struct fuse_opt sshfs_opts[] = {
 	SSHFS_OPT("no_check_root",     no_check_root, 1),
 	SSHFS_OPT("password_stdin",    password_stdin, 1),
 	SSHFS_OPT("delay_connect",     delay_connect, 1),
+	SSHFS_OPT("slave",             slave, 1),
 
 	FUSE_OPT_KEY("-p ",            KEY_PORT),
 	FUSE_OPT_KEY("-C",             KEY_COMPRESS),
@@ -820,7 +823,7 @@ static int pty_expect_loop(void)
 	while (1) {
 		struct pollfd fds[2];
 
-		fds[0].fd = sshfs.fd;
+		fds[0].fd = sshfs.infd;
 		fds[0].events = POLLIN;
 		fds[1].fd = sshfs.ptyfd;
 		fds[1].events = POLLIN;
@@ -928,7 +931,8 @@ static int start_ssh(void)
 		perror("failed to create socket pair");
 		return -1;
 	}
-	sshfs.fd = sockpair[0];
+	sshfs.infd = sockpair[0];
+	sshfs.outfd = sockpair[0];
 
 	pid = fork();
 	if (pid == -1) {
@@ -1053,7 +1057,8 @@ static int connect_to(char *host, char *port)
 
 	freeaddrinfo(ai);
 
-	sshfs.fd = sock;
+	sshfs.infd = sock;
+	sshfs.outfd = sock;
 	return 0;
 }
 
@@ -1061,7 +1066,7 @@ static int do_write(struct iovec *iov, size_t count)
 {
 	int res;
 	while (count) {
-		res = writev(sshfs.fd, iov, count);
+		res = writev(sshfs.outfd, iov, count);
 		if (res == -1) {
 			perror("write");
 			return -1;
@@ -1138,7 +1143,7 @@ static int do_read(struct buffer *buf)
 	uint8_t *p = buf->p;
 	size_t size = buf->size;
 	while (size) {
-		res = read(sshfs.fd, p, size);
+		res = read(sshfs.infd, p, size);
 		if (res == -1) {
 			perror("read");
 			return -1;
@@ -1293,8 +1298,11 @@ static int process_one_request(void)
 
 static void close_conn(void)
 {
-	close(sshfs.fd);
-	sshfs.fd = -1;
+	if (sshfs.infd != sshfs.outfd)
+		close(sshfs.infd);
+	sshfs.infd = -1;
+	close(sshfs.outfd);
+	sshfs.outfd = -1;
 	if (sshfs.ptyfd != -1) {
 		close(sshfs.ptyfd);
 		sshfs.ptyfd = -1;
@@ -1569,9 +1577,13 @@ out:
 
 static int connect_remote(void)
 {
-	int err;
-
-	if (sshfs.directport)
+	int err = 0;
+	
+	if (sshfs.slave) {
+		sshfs.infd = 0;
+		sshfs.outfd = 1;
+	}
+	else if (sshfs.directport)
 		err = connect_to(sshfs.host, sshfs.directport);
 	else
 		err = start_ssh();
@@ -1596,7 +1608,7 @@ static int start_processing_thread(void)
 	if (sshfs.processing_thread_started)
 		return 0;
 
-	if (sshfs.fd == -1) {
+	if (sshfs.infd == -1) {
 		err = connect_remote();
 		if (err)
 			return -EIO;
@@ -3221,7 +3233,8 @@ int main(int argc, char *argv[])
 	sshfs.buflimit_workaround = 1;
 	sshfs.ssh_ver = 2;
 	sshfs.progname = argv[0];
-	sshfs.fd = -1;
+	sshfs.infd = -1;
+	sshfs.outfd = -1;
 	sshfs.ptyfd = -1;
 	sshfs.ptyslavefd = -1;
 	sshfs.delay_connect = 0;
@@ -3330,6 +3343,8 @@ int main(int argc, char *argv[])
 		if (res == -1)
 			exit(1);
 
+		if (sshfs.slave) foreground = 1;
+
 		res = stat(mountpoint, &st);
 		if (res == -1) {
 			perror(mountpoint);
